# Create two namespaces
apiVersion: v1
kind: Namespace
metadata:
  name: ns1
  labels:
    name: ns1
---
apiVersion: v1
kind: Namespace
metadata:
  name: ns2
  labels:
    name: ns2
---
# Run a web server on every node in one namespace
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: whoami
  namespace: ns1
  labels:
    app.kubernetes.io/name: whoami
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: whoami
  template:
    metadata:
      labels:
        app.kubernetes.io/name: whoami
    spec:
      containers:
        - name: whoami
          image: traefik/whoami
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
---
# Run a busybox on every node in the other namespace so we can shell
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: busybox
  namespace: ns2
  labels:
    app.kubernetes.io/name: busybox
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: whoami
  template:
    metadata:
      labels:
        app.kubernetes.io/name: whoami
    spec:
      containers:
        - name: busybox
          image: busybox:1.28 # Pinned version, see https://github.com/kubernetes/kubernetes/issues/66924
          command:
            - sleep
            - "3600"
---
# Expose the web server as a normal service
apiVersion: v1
kind: Service
metadata:
  name: whoami
  namespace: ns1
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: whoami
  ports:
    - name: http
      port: 80
      targetPort: 80
---
# Declare a network policy that disallows all ingress to the namespace containing the server
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: disallow-all-ingress
  namespace: ns1
spec:
  podSelector: {}
  policyTypes:
    - Ingress
---
# Declare a network policy that allows all egress from the namespace containing the shell
# BUG: Shells can access the server when its located on the same node as the shell when this egress
# policy is applied. This holds true when access the server pod directly or via the service.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
  namespace: ns2
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - {}
